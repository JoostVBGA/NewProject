//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/MyAssets/MyInput/GameInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInputs"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""6f055bca-3d7c-4554-9602-34c67e39f801"",
            ""actions"": [
                {
                    ""name"": ""Look"",
                    ""type"": ""PassThrough"",
                    ""id"": ""66d29c30-88ba-4338-a67d-fc66764a2469"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""22965720-16ef-4cc3-bdf9-69dd35c42af4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""8a25714b-5d75-4b6b-8423-e73fa5fedf68"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MagicPower"",
                    ""type"": ""Button"",
                    ""id"": ""e7c585d4-19a7-4a65-ae69-4c6e8127e729"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MagicSpeed"",
                    ""type"": ""Button"",
                    ""id"": ""7099fbdd-9db3-4158-a2e7-625ce119a6f4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""StartMagic"",
                    ""type"": ""Button"",
                    ""id"": ""3e0c00b9-f2df-4174-af6e-0a72ff156038"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Opt1"",
                    ""type"": ""Button"",
                    ""id"": ""fcf001f3-0449-4bc8-8130-714f27719bb4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Opt2"",
                    ""type"": ""Button"",
                    ""id"": ""82f6ccd4-e24b-488a-b7a1-1b42b43944f1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseMagic"",
                    ""type"": ""Button"",
                    ""id"": ""85c89c44-116f-4b16-9a45-3900295cdafd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Store"",
                    ""type"": ""Button"",
                    ""id"": ""8469c202-a4a5-4b2d-8e08-1d86aa6a3747"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""74cd14a2-e811-408a-ab8b-bebceb3b8482"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""2177ffb0-abce-4739-9d2c-bf5c7d2dc852"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""8f781002-2c5e-4cfe-bb65-e38a8630ae06"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""b9bbba07-ca6a-4de4-949d-2c72e07d6706"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""dff0472c-e279-4ad2-91ce-a1d80608b7d1"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""0df41557-3afc-4fbb-afb0-2ff98d5ade0b"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""eaa6906f-e6cf-4976-a3e2-08de0e92a53a"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6303c182-5dc5-463e-942c-793ba61ca799"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MagicPower"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7e4e999a-64d1-4076-ac1c-aef454c800d2"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MagicSpeed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fa856748-6315-4de2-bbf6-ede56fe62b8d"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StartMagic"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a15034f6-160b-4003-9742-b0f6643464d7"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Opt1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bc9a107d-3717-4cad-a8f5-afb4473b6f03"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Opt2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fd28b5f8-5c74-4932-8e49-bf59ef566950"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseMagic"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""58773956-75d0-4425-bdee-b57b9283e437"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Store"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Look = m_Player.FindAction("Look", throwIfNotFound: true);
        m_Player_Movement = m_Player.FindAction("Movement", throwIfNotFound: true);
        m_Player_Jump = m_Player.FindAction("Jump", throwIfNotFound: true);
        m_Player_MagicPower = m_Player.FindAction("MagicPower", throwIfNotFound: true);
        m_Player_MagicSpeed = m_Player.FindAction("MagicSpeed", throwIfNotFound: true);
        m_Player_StartMagic = m_Player.FindAction("StartMagic", throwIfNotFound: true);
        m_Player_Opt1 = m_Player.FindAction("Opt1", throwIfNotFound: true);
        m_Player_Opt2 = m_Player.FindAction("Opt2", throwIfNotFound: true);
        m_Player_UseMagic = m_Player.FindAction("UseMagic", throwIfNotFound: true);
        m_Player_Store = m_Player.FindAction("Store", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_Look;
    private readonly InputAction m_Player_Movement;
    private readonly InputAction m_Player_Jump;
    private readonly InputAction m_Player_MagicPower;
    private readonly InputAction m_Player_MagicSpeed;
    private readonly InputAction m_Player_StartMagic;
    private readonly InputAction m_Player_Opt1;
    private readonly InputAction m_Player_Opt2;
    private readonly InputAction m_Player_UseMagic;
    private readonly InputAction m_Player_Store;
    public struct PlayerActions
    {
        private @GameInputs m_Wrapper;
        public PlayerActions(@GameInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Look => m_Wrapper.m_Player_Look;
        public InputAction @Movement => m_Wrapper.m_Player_Movement;
        public InputAction @Jump => m_Wrapper.m_Player_Jump;
        public InputAction @MagicPower => m_Wrapper.m_Player_MagicPower;
        public InputAction @MagicSpeed => m_Wrapper.m_Player_MagicSpeed;
        public InputAction @StartMagic => m_Wrapper.m_Player_StartMagic;
        public InputAction @Opt1 => m_Wrapper.m_Player_Opt1;
        public InputAction @Opt2 => m_Wrapper.m_Player_Opt2;
        public InputAction @UseMagic => m_Wrapper.m_Player_UseMagic;
        public InputAction @Store => m_Wrapper.m_Player_Store;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Look.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLook;
                @Movement.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                @Jump.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @MagicPower.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMagicPower;
                @MagicPower.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMagicPower;
                @MagicPower.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMagicPower;
                @MagicSpeed.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMagicSpeed;
                @MagicSpeed.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMagicSpeed;
                @MagicSpeed.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMagicSpeed;
                @StartMagic.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnStartMagic;
                @StartMagic.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnStartMagic;
                @StartMagic.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnStartMagic;
                @Opt1.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnOpt1;
                @Opt1.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnOpt1;
                @Opt1.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnOpt1;
                @Opt2.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnOpt2;
                @Opt2.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnOpt2;
                @Opt2.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnOpt2;
                @UseMagic.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnUseMagic;
                @UseMagic.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnUseMagic;
                @UseMagic.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnUseMagic;
                @Store.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnStore;
                @Store.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnStore;
                @Store.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnStore;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @MagicPower.started += instance.OnMagicPower;
                @MagicPower.performed += instance.OnMagicPower;
                @MagicPower.canceled += instance.OnMagicPower;
                @MagicSpeed.started += instance.OnMagicSpeed;
                @MagicSpeed.performed += instance.OnMagicSpeed;
                @MagicSpeed.canceled += instance.OnMagicSpeed;
                @StartMagic.started += instance.OnStartMagic;
                @StartMagic.performed += instance.OnStartMagic;
                @StartMagic.canceled += instance.OnStartMagic;
                @Opt1.started += instance.OnOpt1;
                @Opt1.performed += instance.OnOpt1;
                @Opt1.canceled += instance.OnOpt1;
                @Opt2.started += instance.OnOpt2;
                @Opt2.performed += instance.OnOpt2;
                @Opt2.canceled += instance.OnOpt2;
                @UseMagic.started += instance.OnUseMagic;
                @UseMagic.performed += instance.OnUseMagic;
                @UseMagic.canceled += instance.OnUseMagic;
                @Store.started += instance.OnStore;
                @Store.performed += instance.OnStore;
                @Store.canceled += instance.OnStore;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnLook(InputAction.CallbackContext context);
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnMagicPower(InputAction.CallbackContext context);
        void OnMagicSpeed(InputAction.CallbackContext context);
        void OnStartMagic(InputAction.CallbackContext context);
        void OnOpt1(InputAction.CallbackContext context);
        void OnOpt2(InputAction.CallbackContext context);
        void OnUseMagic(InputAction.CallbackContext context);
        void OnStore(InputAction.CallbackContext context);
    }
}
