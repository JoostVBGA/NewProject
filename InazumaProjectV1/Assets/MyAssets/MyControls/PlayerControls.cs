//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/MyAssets/MyControls/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""BattleState"",
            ""id"": ""fe9c0034-6484-4d2b-8fc4-f7ab5c0731df"",
            ""actions"": [],
            ""bindings"": []
        },
        {
            ""name"": ""WarState"",
            ""id"": ""b6b73a49-0580-4243-82e8-4ab6a5828e1e"",
            ""actions"": [
                {
                    ""name"": ""CameraUp"",
                    ""type"": ""Button"",
                    ""id"": ""ec32cd6d-c8c1-4563-9f3f-bdbbca28c4c6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CameraDown"",
                    ""type"": ""Button"",
                    ""id"": ""e15acdf9-0551-4f1e-ba2f-48c58e87e23f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CameraLeft"",
                    ""type"": ""Button"",
                    ""id"": ""6072ef8b-6fc2-4a24-b7a4-a083f0b94eca"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CameraRight"",
                    ""type"": ""Button"",
                    ""id"": ""c16d1297-669c-4de5-976d-336f3facf65c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f75332b1-b046-4009-8bdd-287bd0e92d2e"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9917a466-502b-4585-bdba-5a86fe6e0310"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""45a9c415-0bc1-43b7-ad08-9e738b37254c"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5e684eb6-129c-4f8c-b65c-1a404420c7fe"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""OverWorldState"",
            ""id"": ""7f3868ab-d148-4744-aaac-7f45a18e047b"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""cb31a19b-0e83-49c0-9225-a793f6a25e25"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PlayerInteract"",
                    ""type"": ""Button"",
                    ""id"": ""8e5501d6-9f25-47b0-81b1-281c2566f96c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""943503b8-2ed1-441c-8fb4-348ffe193c07"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerInteract"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""06510159-93f0-42a5-9341-1069f11c971a"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerInteract"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""ab0a5c6f-5c42-428f-99f2-41975dfb5ddd"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c645bc3e-e5fc-4227-956d-4f70144de5a6"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""df5d37a2-6c5f-42c1-9fb4-de4b76a37138"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""249fce9e-8eab-41c2-a332-9cfe763efc9f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""cad83794-e9ee-40d4-acce-91e1d1916e00"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // BattleState
        m_BattleState = asset.FindActionMap("BattleState", throwIfNotFound: true);
        // WarState
        m_WarState = asset.FindActionMap("WarState", throwIfNotFound: true);
        m_WarState_CameraUp = m_WarState.FindAction("CameraUp", throwIfNotFound: true);
        m_WarState_CameraDown = m_WarState.FindAction("CameraDown", throwIfNotFound: true);
        m_WarState_CameraLeft = m_WarState.FindAction("CameraLeft", throwIfNotFound: true);
        m_WarState_CameraRight = m_WarState.FindAction("CameraRight", throwIfNotFound: true);
        // OverWorldState
        m_OverWorldState = asset.FindActionMap("OverWorldState", throwIfNotFound: true);
        m_OverWorldState_Movement = m_OverWorldState.FindAction("Movement", throwIfNotFound: true);
        m_OverWorldState_PlayerInteract = m_OverWorldState.FindAction("PlayerInteract", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // BattleState
    private readonly InputActionMap m_BattleState;
    private IBattleStateActions m_BattleStateActionsCallbackInterface;
    public struct BattleStateActions
    {
        private @PlayerControls m_Wrapper;
        public BattleStateActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputActionMap Get() { return m_Wrapper.m_BattleState; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BattleStateActions set) { return set.Get(); }
        public void SetCallbacks(IBattleStateActions instance)
        {
            if (m_Wrapper.m_BattleStateActionsCallbackInterface != null)
            {
            }
            m_Wrapper.m_BattleStateActionsCallbackInterface = instance;
            if (instance != null)
            {
            }
        }
    }
    public BattleStateActions @BattleState => new BattleStateActions(this);

    // WarState
    private readonly InputActionMap m_WarState;
    private IWarStateActions m_WarStateActionsCallbackInterface;
    private readonly InputAction m_WarState_CameraUp;
    private readonly InputAction m_WarState_CameraDown;
    private readonly InputAction m_WarState_CameraLeft;
    private readonly InputAction m_WarState_CameraRight;
    public struct WarStateActions
    {
        private @PlayerControls m_Wrapper;
        public WarStateActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @CameraUp => m_Wrapper.m_WarState_CameraUp;
        public InputAction @CameraDown => m_Wrapper.m_WarState_CameraDown;
        public InputAction @CameraLeft => m_Wrapper.m_WarState_CameraLeft;
        public InputAction @CameraRight => m_Wrapper.m_WarState_CameraRight;
        public InputActionMap Get() { return m_Wrapper.m_WarState; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WarStateActions set) { return set.Get(); }
        public void SetCallbacks(IWarStateActions instance)
        {
            if (m_Wrapper.m_WarStateActionsCallbackInterface != null)
            {
                @CameraUp.started -= m_Wrapper.m_WarStateActionsCallbackInterface.OnCameraUp;
                @CameraUp.performed -= m_Wrapper.m_WarStateActionsCallbackInterface.OnCameraUp;
                @CameraUp.canceled -= m_Wrapper.m_WarStateActionsCallbackInterface.OnCameraUp;
                @CameraDown.started -= m_Wrapper.m_WarStateActionsCallbackInterface.OnCameraDown;
                @CameraDown.performed -= m_Wrapper.m_WarStateActionsCallbackInterface.OnCameraDown;
                @CameraDown.canceled -= m_Wrapper.m_WarStateActionsCallbackInterface.OnCameraDown;
                @CameraLeft.started -= m_Wrapper.m_WarStateActionsCallbackInterface.OnCameraLeft;
                @CameraLeft.performed -= m_Wrapper.m_WarStateActionsCallbackInterface.OnCameraLeft;
                @CameraLeft.canceled -= m_Wrapper.m_WarStateActionsCallbackInterface.OnCameraLeft;
                @CameraRight.started -= m_Wrapper.m_WarStateActionsCallbackInterface.OnCameraRight;
                @CameraRight.performed -= m_Wrapper.m_WarStateActionsCallbackInterface.OnCameraRight;
                @CameraRight.canceled -= m_Wrapper.m_WarStateActionsCallbackInterface.OnCameraRight;
            }
            m_Wrapper.m_WarStateActionsCallbackInterface = instance;
            if (instance != null)
            {
                @CameraUp.started += instance.OnCameraUp;
                @CameraUp.performed += instance.OnCameraUp;
                @CameraUp.canceled += instance.OnCameraUp;
                @CameraDown.started += instance.OnCameraDown;
                @CameraDown.performed += instance.OnCameraDown;
                @CameraDown.canceled += instance.OnCameraDown;
                @CameraLeft.started += instance.OnCameraLeft;
                @CameraLeft.performed += instance.OnCameraLeft;
                @CameraLeft.canceled += instance.OnCameraLeft;
                @CameraRight.started += instance.OnCameraRight;
                @CameraRight.performed += instance.OnCameraRight;
                @CameraRight.canceled += instance.OnCameraRight;
            }
        }
    }
    public WarStateActions @WarState => new WarStateActions(this);

    // OverWorldState
    private readonly InputActionMap m_OverWorldState;
    private IOverWorldStateActions m_OverWorldStateActionsCallbackInterface;
    private readonly InputAction m_OverWorldState_Movement;
    private readonly InputAction m_OverWorldState_PlayerInteract;
    public struct OverWorldStateActions
    {
        private @PlayerControls m_Wrapper;
        public OverWorldStateActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_OverWorldState_Movement;
        public InputAction @PlayerInteract => m_Wrapper.m_OverWorldState_PlayerInteract;
        public InputActionMap Get() { return m_Wrapper.m_OverWorldState; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(OverWorldStateActions set) { return set.Get(); }
        public void SetCallbacks(IOverWorldStateActions instance)
        {
            if (m_Wrapper.m_OverWorldStateActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_OverWorldStateActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_OverWorldStateActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_OverWorldStateActionsCallbackInterface.OnMovement;
                @PlayerInteract.started -= m_Wrapper.m_OverWorldStateActionsCallbackInterface.OnPlayerInteract;
                @PlayerInteract.performed -= m_Wrapper.m_OverWorldStateActionsCallbackInterface.OnPlayerInteract;
                @PlayerInteract.canceled -= m_Wrapper.m_OverWorldStateActionsCallbackInterface.OnPlayerInteract;
            }
            m_Wrapper.m_OverWorldStateActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @PlayerInteract.started += instance.OnPlayerInteract;
                @PlayerInteract.performed += instance.OnPlayerInteract;
                @PlayerInteract.canceled += instance.OnPlayerInteract;
            }
        }
    }
    public OverWorldStateActions @OverWorldState => new OverWorldStateActions(this);
    public interface IBattleStateActions
    {
    }
    public interface IWarStateActions
    {
        void OnCameraUp(InputAction.CallbackContext context);
        void OnCameraDown(InputAction.CallbackContext context);
        void OnCameraLeft(InputAction.CallbackContext context);
        void OnCameraRight(InputAction.CallbackContext context);
    }
    public interface IOverWorldStateActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnPlayerInteract(InputAction.CallbackContext context);
    }
}
